////////////////////////////////////////////////////////////////////////
// Class:       OpDetInvestigatorAna
// Module Type: analyzer
// File:        OpDetInvestigatorAna_module.cc
//
// Generated at Tue Nov 10 13:06:09 2015 by Wesley Ketchum using artmod
// from cetpkgsupport v1_08_07.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include "art/Framework/Services/Optional/TFileService.h"

#include "TTree.h"

#include "OpDetInvestigator/OpDetInvestigator.hh"

namespace opana {
  class OpDetInvestigatorAna;
}

class opana::OpDetInvestigatorAna : public art::EDAnalyzer {
public:
  explicit OpDetInvestigatorAna(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  OpDetInvestigatorAna(OpDetInvestigatorAna const &) = delete;
  OpDetInvestigatorAna(OpDetInvestigatorAna &&) = delete;
  OpDetInvestigatorAna & operator = (OpDetInvestigatorAna const &) = delete;
  OpDetInvestigatorAna & operator = (OpDetInvestigatorAna &&) = delete;

  // Required functions.
  void analyze(art::Event const & e) override;

  // Selected optional functions.
  void reconfigure(fhicl::ParameterSet const & p) override;

private:

  // Declare member data here.
  opana::OpDetInvestigator fMyAnalysisObj;
  
};


opana::OpDetInvestigatorAna::OpDetInvestigatorAna(fhicl::ParameterSet const & p)
  :
  EDAnalyzer(p)  // ,
 // More initializers here.
{
  art::ServiceHandle<art::TFileService> tfs;
  fMyAnalysisObj.SetupOutputTree(tfs->make<TTree>("myanatree","MyAnalysis Tree"));
}

void opana::OpDetInvestigatorAna::analyze(art::Event const & e)
{
  fMyAnalysisObj.RunAnalysis();
}

void opana::OpDetInvestigatorAna::reconfigure(fhicl::ParameterSet const & p)
{
  // Implementation of optional member function here.
}

DEFINE_ART_MODULE(opana::OpDetInvestigatorAna)
